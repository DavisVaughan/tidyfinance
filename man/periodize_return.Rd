% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/periodize_return.R
\name{periodize_return}
\alias{periodize_return}
\alias{annualize_return}
\title{Calculate constant growth rates}
\usage{
periodize_return(.r, from_period = "daily", to_period = "yearly",
  type = "arithmetic")

annualize_return(.r, from_period = "daily", type = "arithmetic")
}
\arguments{
\item{.r}{A vector of returns.}

\item{from_period}{The period the returns are currently in.}

\item{to_period}{The period that you want to calculate a constant growth
rate for.}

\item{type}{Either \code{"arithmetic"} or \code{"log"} returns.}
}
\description{
\code{annualize_return()} computes the constant annual return of a return stream
that is typically longer than one year. This is often called the Compound
Annual Growth Rate (CAGR). \code{periodize_return()} takes that
concept and generalizes it to any valid period.
}
\details{
\code{annualize_return()} is a common special case of \code{periodize_return()} in which
the \code{to_period} argument is set to \code{"yearly"}.
}
\section{Implementation}{


The general equation for \code{periodize_return()} solves for \code{r_period} in
either:
\itemize{
\item Arithmetic return equation
}

\deqn{(1 + r_period) ^ multiplier = (1 + r_1)(1 + r_2) ... (1 + r_n) }
\itemize{
\item Log return equation
}

\deqn{ r_period * multiplier = r_1 + r_2 + ... + r_n }

where \code{r_period} is the constant compound growth ratio for the specified
\code{to_period}. The \code{multiplier} is the same for the arithmetic and log formulas
and is calculated as:

\deqn{ multiplier = length(.r) * annualization_multiplier(to_period) / annualization_multiplier(from_period) }
}

\examples{

data(FANG)

FANG_time <- FANG \%>\%
  as_tbl_time(date) \%>\%
  dplyr::group_by(symbol)

# Compound Annual Growth Rate (CAGR)
FANG_time \%>\%
  calculate_return(adjusted) \%>\%
  dplyr::summarise(CAGR = annualize_return(adjusted_return))

# Compound Monthly Growth Rate (CMGR)
FANG_time \%>\%
  calculate_return(adjusted, period = "daily") \%>\%
  dplyr::summarise(
    CMGR = periodize_return(
      adjusted_return,
      from_period = "daily",
      to_period = "monthly"
    )
  )

# Equivalent 6 month growth rate
FANG_time \%>\%
  calculate_return(adjusted, period = "monthly") \%>\%
  dplyr::summarise(
    CMGR = periodize_return(
      adjusted_return,
      from_period = "monthly",
      to_period = "6 month"
    )
  )

# One other useful feature is to take a daily return series and
# find the single daily return value that would give equivalent
# results if compounded over the same number of days
FANG_time \%>\%
  calculate_return(adjusted, period = "daily") \%>\%
  dplyr::summarise(
    equivalent_constant_daily_return = periodize_return(
      adjusted_return,
      from_period = "daily",
      to_period = "daily"
    )
  )

}
